===================================tương tác với git local ====================================================

git init				                <Khỏi tạo kho chứa git local>



git log --oneline			            <kiem tra cac commit>

git status				                <kiem tra xem working directory va .git dicectory có gì khác nhau không(tức là so sánh thư mục làm việc hiện tại với commit cuối)>

git add . 				                <đưa nội dung sửa đổi vào trạng thái Staging để chuẩn bị commit>

git commit -m"content message"		    <đưa tất cả file trong Staging vào kho chứa git(.git derectory)>

git restore ten_file			        <phục hồi file đã bị xóa trong staging>

git restore .				            <phục hồi tất cả các file đã bị xóa trong staging>

git restore -- .			            <phục hồi tất cả các file về trạng thái staged>

git diff				                <hiển thị sự thay đổi của những file đã sửa đổi so với commit cuối trong staging>

git checkout id_commit -- .		        <phục hồi tất cả file về trạng thái cua 1 commit nào đó(có thể thay . bang tên file cụ thể, tức là chỉ phục hồi 1 file nào đó) file muốn phục hồi ở commit cũ phải tồn 					tại>


git restore --staged <file>		        <đưa file ra khỏi vùng staged(sau khi dung lệnh git checkout id_commit thì các file được lưu sẵn ở vùng staged)>


git commit --amend -m"noi dung commit"  <đưa tất cả các file vào kho chứa git(nhưng kh tạo ra commit mới mà gộp vào commit 	cuối cùng. Dùng cho trường hợp có ít sự thay đổi, hoặc lần commit trước đó bị thiếu 					nội dung mà chúng ta lại kh muốn tạo ra commit mới)>

git diff id_commit1 id_commit2		    <so sánh sự khác nhau giữa 2 commit>

git reset --soft HEAD~1			        <xóa commit cuối cùng trong git repository, lưu các thay đổi vào vùng staging(Đảm bảo rang khi dung git reset thì commit chưa được push lên kho chứa git online)>

git reset --hard HEAD~1			        <xóa hẳn commit, không có cơ hội sửa đổi(Đảm bảo rang khi dung git reset thì commit chưa được push lên kho chứa git online)>

git reset --hard HEAD <commit_id>		<xóa hẳn commit, sẽ xóa từ commit mới nhất cho tới commit_id, không có cơ hội sửa đổi(Đảm bảo rang khi dung git reset thì commit chưa được push lên kho chứa git online)>

git revert <commit_id>					<sẽ tạo ra 1 commit mới, đảo ngược commit_id mà bạn muốn quay về, mà kh làm ảnh hưởng đến lịch sử commit(phù hợp cho làm việc nhóm)>


git reset -- <file>			            <đưa file ở trạng thái staged quay về modifier>

git branch				                <hiển thị các nhánh của kho chứa git>

git branch <ten_nhanh>			        <tạo nhánh mới>
 
git checkout <ten_nhanh>		        <chuyển sang 1 nhánh khác>

git switch <ten_nhanh>			        <chuyển sang 1 nhánh khác>

git branch -d <ten_nhanh> 		        <xóa 1 nhánh bất kì>

git merge <ten_nhanh>			        <merge (ten_nhanh_ vào nhánh hiện tại) giữ nguyên lịch sử commit(cơ chế merge dựa vào 3 commit cơ bản: commit base, commit cuối của ten_nhanh, commit cuối của nhánh hiện tại). nếu sau khi merge mà xảy ra confict(giả sử đã fix hết confict) thì sẽ tạo ra 1 commit mới, còn nếu như kh xảy ra confict thì sẽ kh tạo commit mới>

git merge --abort			            <hủy merge(sau khi merge các nhánh xảy ra config sử dung lệnh trên để hủy bỏ đưa về trạng thái trước khi merge của nhánh muốn merge)>

git rebase <ten_nhanh>					<rebase ten_nhanh vào nhánh hiện tại(thay đổi lịch sử commit) các commit của ten_nhanh sẽ là commit cơ sở của nhánh hiện tại, lần lượt theo sau chính là commit của nhánh hiện tại>

git rebase --continue					<nếu rebase xảy ra conflict, sau khi fix conflict dùng lệnh trên để tiếp tục rebase>

git rebase --skip						<bỏ qua commit gây ra conflict>

===========================
nếu như kh dung vscode để fix config thì có thể dung câu lệnh (git mergetool)

các từ khóa sau khi merge có thể chú ý như sau:

ta có 2 nhánh A và B, ta tiến hành merge nhánh A vào nhánh B(lúc này xảy ra config)

nội dung do dánh B sửa đổi sẽ là "Current Change"

nội dung do dánh A sửa đổi sẽ là "Incoming Change"

nếu như dùng rebase thì ngược lại(lí do: các commit của nhánh A sẽ trở thành commit  cơ sở, commit của nhánh B sẽ theo sau)
===========================


git log --oneline --graph		        <hiển thị sơ đồ chi tiết về các commit(trong trường hợp có merge branch)>

git checkout id_commit			        <đưa con trỏ HEAD về 1 commit cụ thể>

git revert <commit_id>					<tạo ra 1 commit mới đảo ngược những thay đổi được thực hiện bởi (commit_id)>




======================================== Tương tác với git repository ================================

git branch -a									<hiển thị các branch ở trên local và remote>

git remote										<hiển thị các remote mà local đang làm việc, tương tác>

git remote -v									<xem chi tiết địa chỉ kết nối của remote>

git remote rm <ten_remote>						<xóa đi remote khỏi local>

git remote add <ten_remote>						<thực hiện liên kết git local với git remote>

nếu như lần đầu up code lên remote thì thêm tham số "-u" phía trước <ten_remote> để branch local có thể theo dỗi remote branch(để sử dụng git push, git pull mà kh cần gõ tên nhánh cụ thể)

git push <ten_remote> <ten_nhanh_tren_remote> 	<thực hiện đẩy code lên remote(nhánh cụ thể)>

git push <ten_remote> --all					 	<thực hiện đẩy code lên remote(tất cả các nhánh)>

git push --delete <ten_remote> <ten_nhanh_xoa>	<thực hiện xóa 1 branch trên remote>

git push --force						<ép buộc các commit trên remote thay đổi theo các commit trên local>

git clone <dia_chi_luu_tru_git>					<tải về 1 kho chứa remote>

git fetch										<cập nhật thông tin mới có từ remote(những dữ liệu này kh cập nhật ngay vào git local, nhưng vẫn có thể dùng các câu lệnh để tương tác với dữ liệu đó)>

git fetch <ten_remote>

git merge <ten_remote>/<ten_nhanh>				<tiến hành merge code trên remove về local>

git pull(git fetch + git merge)					<cập nhật những commit mới từ remote về local>

git pull <ten_remote> <ten_nhanh>				<cập nhật những commit mới nhất từ (ten_remote) về local (ten_nhanh) cụ thể>

git pull <ten_remote> --all						<cập nhật những commit mới nhất từ (ten_remote) về local (tất cả các nhánh)>

